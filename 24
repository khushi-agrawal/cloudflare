
{{ column }}
          <button mat-icon-button [matMenuTriggerFor]="filterMenu" (click)="currentFilterColumn = column">
            <mat-icon>filter_alt</mat-icon>
          </button>
          <!-- Filter Menu -->
          <mat-menu #filterMenu="matMenu">
            <div class="filter-menu">
              <mat-form-field>
                <mat-select [(value)]="filterCondition" placeholder="Condition">
                  <mat-option value="contains">Contains</mat-option>
                  <mat-option value="equals">Equals</mat-option>
                </mat-select>
              </mat-form-field>
              <mat-form-field>
                <input matInput [(ngModel)]="filterValue" placeholder="Filter {{ column }}" />
              </mat-form-field>
              <button mat-button (click)="applyFilter(column)">Apply</button>
            </div>
          </mat-menu>
        </th>

.filter-menu {
  padding: 10px;
  width: 200px;
}

mat-form-field {
  display: block;
  margin-bottom: 10px;
}



applyFilter(column: string): void {
    this.dataSource.filterPredicate = (data, filter) => {
      const value = data[column]?.toString().toLowerCase() || '';
      const searchText = filter.toLowerCase();

      if (this.filterCondition === 'contains') {
        return value.includes(searchText);
      } else if (this.filterCondition === 'equals') {
        return value === searchText;
      }
      return false;
    };

    this.dataSource.filter = this.filterValue;

    if (this.dataSource.paginator) {
      this.dataSource.paginator.firstPage();
    }
  }
}

 

